// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RL.Tickets.DataAccess;

namespace RL.Tickets.DataAccess.Migrations
{
    [DbContext(typeof(TicketsDbContext))]
    partial class TicketsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RL.Tickets.Domain.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "SSK-36"
                        },
                        new
                        {
                            Id = 2,
                            Name = "SOO-120"
                        },
                        new
                        {
                            Id = 3,
                            Name = "K-02"
                        });
                });

            modelBuilder.Entity("RL.Tickets.Domain.Ticket", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("DateOfClosing")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateOfCreation")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExecutorId")
                        .HasColumnType("int");

                    b.Property<int>("InitiatorId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExecutorId");

                    b.HasIndex("InitiatorId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("RL.Tickets.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Даниил",
                            Patronymic = "Петрович",
                            SecondName = "Рылеев"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Максим",
                            Patronymic = "Павлович",
                            SecondName = "Кравцов"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Денис",
                            Patronymic = "Аркадьевич",
                            SecondName = "Возников"
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "Алексей",
                            Patronymic = "Денисович",
                            SecondName = "Петров"
                        });
                });

            modelBuilder.Entity("RL.Tickets.Domain.Ticket", b =>
                {
                    b.HasOne("RL.Tickets.Domain.User", "Executor")
                        .WithMany("TicketsAsExecutor")
                        .HasForeignKey("ExecutorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RL.Tickets.Domain.User", "Initiator")
                        .WithMany("TicketsAsInitiator")
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RL.Tickets.Domain.Project", "Project")
                        .WithMany("Tickets")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Executor");

                    b.Navigation("Initiator");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("RL.Tickets.Domain.Project", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("RL.Tickets.Domain.User", b =>
                {
                    b.Navigation("TicketsAsExecutor");

                    b.Navigation("TicketsAsInitiator");
                });
#pragma warning restore 612, 618
        }
    }
}
